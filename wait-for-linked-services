#!/bin/bash
#
# Given standard docker line variables, parses and waits for them to respond to SYNs in parallel with timeout.
# Works with tcp, udp, and unix sockets.
#
# @deps bash>=4 netcat
# @url https://github.com/akatrevorjay/wait-for-linked-services
# @author trevorj
#
set -eo pipefail

: ${TIMEOUT:=30}

#
# Output
#

SELF="$(basename "$0")"

function _script_echo   { echo "[$(date)] $0[$$]" "${@:2}" "#$1" >&2; }
function debug          { [[ -z "$DEBUG" ]] || _script_echo DEBUG "$@"; }
function e              { [[ -n "$QUIET" ]] || _script_echo INFO "$@"; }
function info           { e "$@"; }
function warn           { [[ -n "$QUIET" ]] || _script_echo WARNING "$@"; }
function warning        { warn "$@"; }
function error          { _script_echo ERROR "$@" >&2; }
function death          { error "$@"; exit 1; }
function debug_call     { debug 'call:' "$@"; "$@"; }

function split_url_proto {
    echo "${1%%://*}" "${1#*://}"
}

function get_primary_service_urls {
    [[ $# -gt 0 ]] || set -- '^[A-Z0-9]+_[0-9]+'
    debug "Getting primary service urls for \"$1\""

    local var='' service='' ret=1
    for var in $(compgen -A variable | egrep "^${1}_PORT\$"); do
        echo "${!var}"
        ret=0
    done
    return $ret
}

function is_url_port_open {
    local url="$1"
    debug "Checking if $url is open"

    set -- $(split_url_proto "$url")
    local proto="$1" addr="$2"

    if [[ -z "$proto" ]]; then
        warn "No proto found for url \"$url\""
        return 127
    fi

    if [[ -z "$addr" ]]; then
        warn "No addr found for url \"$url\""
        return 127
    fi

    local nc="nc -z"
    case "$proto" in
        unix)
            $nc -U "$addr" ;;
        udp)
            nc+=" -u" ;;&
        tcp)
            local host="${addr%%:*}" port="${url##*:}"
            [[ -n "$host" ]] || death "No host found for url \"$url\""
            [[ -n "$port" ]] || death "No port found for url \"$url\""
            $nc "$host" "$port" ;;
        *)
            warn "Unknown proto \"$proto\" for url \"$url\""
            return 127 ;;
    esac
}

function wait_for_url_port_open {
    local url="$1" timeout_secs="${2:-$TIMEOUT}"
    debug "Checking url \"$url\" (timeout=${timeout_secs}s)"

    local i=0
    while [ $i -lt $timeout_secs ]
    do
        if is_url_port_open "$url"; then
            e "Service up: \"$url\""
            return 0
        fi
        let i++ || :
        sleep 1
    done

    error "Timeout waiting for url \"$url\""
    return 1
}

function parallellize() {
    if [[ $# -eq 0 ]]; then
        e "No linked services found to check; assuming lone wolf."
        return 0
    fi

    e "Waiting for services in parallel (timeout=$TIMEOUT):" "$@"

    for url in "$@"; do
        "$0" "$url" &
    done

    debug "Waiting for any remaining pids"
    wait
    debug "Services up:" "$@"
}

function main {
    # make sure we have `nc`
    type nc > /dev/null || death "failed to find 'nc'"

    # If none were specified, check all linked services
    if [[ $# -eq 0 ]]; then
        debug "Getting a list of all linked services"
        set -- $(get_primary_service_urls | sort -u)
    fi

    # If we have one, run direct. If many, check in parallel.
    case $# in
        1) wait_for_url_port_open "$1" ;;
        *) parallellize "$@" ;;
    esac
}

main "$@"
